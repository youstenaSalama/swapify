const CategoryModel = require('../modules/CategoryModel');
const ItemModel = require('../modules/ItemModel');
const slugify = require('slugify');
const asyncHandler = require('express-async-handler');
const multer = require('multer');
const jwt = require('jsonwebtoken');
const mongoose = require('mongoose');
const cloudinary = require('../util/Cloudinary.js')




const storage = multer.diskStorage({
  destination: function (req, file, cb) {
      cb(null, 'uploadsCategories/'); // Save the uploaded files to the 'uploadsCategories' directory
  },
  filename: function (req, file, cb) {
      cb(null, file.fieldname + '-' + Date.now() + '.' + file.originalname.split('.').pop());
  }
});
const upload = multer({ storage: storage });


// Function To List All Categories
exports.listCategories = asyncHandler(async (req, res) => {
    try {
        const categories = await CategoryModel.find();
        res.status(200).json(categories);
    } catch (error) {
        console.log(error);
        res.status(500).json({ error: 'Internal Server Error' });
    }
});


///Get accepted items in a specific category & exclude the items of the logged-in user
exports.getItemsByCategory = asyncHandler(async (req, res) => {
    // Extract token from request headers
    const token = req.headers.token;
  
    // Check if token exists
    if (!token) {
      return res.status(401).json({ success: false, message: 'Unauthorized: No token provided' });
    }
  
    try {
      // Verify token
      const decoded = jwt.verify(token, 'your_secret_key');
      const userId = decoded.userId;
  
      // Extract category ID from request parameters
      const categoryId = req.params.categoryId;
  
      // Check if category ID is valid
      if (!mongoose.Types.ObjectId.isValid(categoryId)) {
        return res.status(400).json({ success: false, message: 'Invalid category ID' });
      }
  
      // req from user as params (pages, limit)
      const page = req.query.page * 1 || 1; // to convert string to number(query returns string)
      const limit = req.query.limit * 1 || 5;
      const skip = (page - 1) * limit;
  
      // Modify the query to filter for accepted items in the specified category only and exclude items from the logged-in user
      const items = await ItemModel.find({ category: categoryId, status: 'accepted', user: { $ne: userId } })
        .skip(skip)
        .limit(limit)
        .populate('category', '_id name'); // Populate the 'category' field and retrieve both '_id' and 'name'
  
      const formattedItems = items.map(item => ({
        _id: item._id,
        title: item.title,
        Description: item.Description,
        price: item.price,
        category: item.category._id, // Retrieve category ID
        user: item.user,
        condition: item.condition,
        slug: item.slug,
        image: item.image,
        status: item.status,
        createdAt: item.created_at,
        updatedAt: item.updated_at
      }));
  
      res.status(200).json({ TotalItems: items.length, page, data: formattedItems });
  
    } catch (error) {
      // Handle JWT errors
      if (error.name === 'JsonWebTokenError') {
        return res.status(401).json({ success: false, message: 'Unauthorized: Invalid token' });
      }
  
      console.log(error);
      res.status(500).json({ success: false, message: 'Internal Server Error' });
    }
  });